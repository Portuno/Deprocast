create extension if not exists pgcrypto;

create table if not exists public.journal_entries (
  id uuid primary key default gen_random_uuid(),
  user_id uuid not null references auth.users (id) on delete cascade,
  project_id uuid references public.projects (id) on delete set null,

  -- core
  entry_date date not null default (now() at time zone 'utc')::date,
  title text not null,
  content text not null,
  mood text check (mood in ('great','good','neutral','low','stressed')),

  -- quick check-in
  energy int check (energy between 1 and 10),
  focus int check (focus between 1 and 10),
  emotions text[],

  -- structured
  summary text,
  key_event jsonb, -- { "type": "win"|"loss", "text": "...", "timeOfDay": "...", "trigger": "..." }

  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);

create or replace function public.set_updated_at()
returns trigger as $$
begin
  new.updated_at = now();
  return new;
end;
$$ language plpgsql;

drop trigger if exists set_journal_entries_updated_at on public.journal_entries;
create trigger set_journal_entries_updated_at
before update on public.journal_entries
for each row execute function public.set_updated_at();

-- RLS
alter table public.journal_entries enable row level security;

drop policy if exists "Journal select own" on public.journal_entries;
create policy "Journal select own"
on public.journal_entries for select
using (auth.uid() = user_id);

drop policy if exists "Journal insert own" on public.journal_entries;
create policy "Journal insert own"
on public.journal_entries for insert
with check (auth.uid() = user_id);

drop policy if exists "Journal update own" on public.journal_entries;
create policy "Journal update own"
on public.journal_entries for update
using (auth.uid() = user_id) with check (auth.uid() = user_id);

drop policy if exists "Journal delete own" on public.journal_entries;
create policy "Journal delete own"
on public.journal_entries for delete
using (auth.uid() = user_id);

-- Helpful indexes
create index if not exists journal_entries_user_date_idx on public.journal_entries (user_id, entry_date desc);
create index if not exists journal_entries_project_idx   on public.journal_entries (project_id);